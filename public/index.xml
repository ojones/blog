<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oswald Jones</title>
    <link>http://ojones.github.io/blog/</link>
    <description>Recent content on Oswald Jones</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Oswald Jones</copyright>
    <lastBuildDate>Mon, 21 Mar 2016 19:25:22 -0800</lastBuildDate>
    <atom:link href="http://ojones.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Better HTML Table Parser</title>
      <link>http://ojones.github.io/blog/html_table_parser/</link>
      <pubDate>Mon, 21 Mar 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/html_table_parser/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ pip install html_table_parser
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Transform html tables into usable data structures.  Using beautiful soup table object, return 2D array structure, dictionary, or array of column data.  Imputes cell values from row and col spans :)
&lt;br /&gt;
(&lt;a href=&#34;https://pure-river-60450.herokuapp.com/&#34; target=&#34;blank&#34;&gt;demo&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;code-example:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Code Example&lt;/h2&gt;

&lt;p&gt;Given an html table (with or without row and col spans). You can make a 2D array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bs4 import BeautifulSoup as bs
from html_table_parser import parser_functions as parser

soup = bs(YOUR_HTML_TABLE, &amp;quot;html.parser&amp;quot;)
test_table = soup.find(&#39;table&#39;)
twod_array = parser.make2d(test_table)

# print 2D array
print(twod_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use that 2D array to return column data by heading name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print column data by col heading name (case insensitive)
print(twod_col_data(parser.twod_array, &#39;YOUR_COL_HEADING&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or transform the soup table object (test_table) into a dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# row data begins on first row after col headings
# so rowstart is 1
print(parser.make_dict(test_table, 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I looked everywhere for the code to transform html tables with row and col spans into a 2D array and couldn&amp;rsquo;t find it.  So I thought how hard could it be to quickly write my own.  It was actally kinda hard, so here it is for the next guy.&lt;/p&gt;

&lt;h2 id=&#34;installation:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Works on Python 2.7 and Python &amp;gt;3.4.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ pip install html_table_parser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone https://github.com/ojones/html_table_parser.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tests:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Tests&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ py.test
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributors:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t be shy.&lt;/p&gt;

&lt;h2 id=&#34;license:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://ojones.github.io/blog/about/</link>
      <pubDate>Wed, 10 Feb 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/about/</guid>
      <description>&lt;p&gt;I am a software engineer at &lt;a href=&#34;https://developer.mediahound.com/&#34;&gt;Mediahound&lt;/a&gt; where I work on The Entertainment Graph&amp;trade; powered by Neo4j.&lt;/p&gt;

&lt;p&gt;I love coding in Python, Javascript, and C#, but am also interested in modern functional languages (Ruby is cool too).  This blog is powered by Hugo, which is coded in Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero To One</title>
      <link>http://ojones.github.io/blog/books/ZeroToOne/</link>
      <pubDate>Tue, 09 Feb 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/ZeroToOne/</guid>
      <description>&lt;p&gt;Wow, did not expect so much from a super successful serial investor, but boy was I wrong.  &lt;a href=&#34;https://en.wikipedia.org/wiki/Peter_Thiel&#34;&gt;Peter Thiel&lt;/a&gt; kills it in his latest &lt;a href=&#34;http://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296&#34;&gt;book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What does he &amp;ldquo;kill&amp;rdquo; exactly?  Pessimism.  Well at least the most popular excuses for it.&lt;/p&gt;

&lt;p&gt;That alone is a good reason to read this.  It&amp;rsquo;s not a self help or make your startup rich book.  Rather it&amp;rsquo;s an intellectual frame for the future and how to take part in it.&lt;/p&gt;

&lt;p&gt;It challenges popular viewpoints in economics and technology.  Even I was hurt and offended at parts.  But Thiel makes a strong case and I won&amp;rsquo;t discount his message just because I don&amp;rsquo;t see eye to eye on every line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cityholla</title>
      <link>http://ojones.github.io/blog/cityhollalanding/</link>
      <pubDate>Mon, 25 Jan 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/cityhollalanding/</guid>
      <description>&lt;p&gt;The Cityholla project was a finalist for the city of Santa Monica &lt;a href=&#34;http://hackthebeach.com/contest/&#34; target=&#34;blank&#34;&gt;Hack the Beach&amp;rdquo;&lt;/a&gt; contest 2015.  The code repo is private, but you can see our splash page &lt;a href=&#34;https://desolate-lake-19599.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;They say that Moore&amp;rsquo;s law only applies to hardware, but I agree with Ray Kurzweil that software is also advancing at a more than linear rate.&lt;/p&gt;

&lt;p&gt;I got a text on Sunday to create a landing page to display details and collect emails.  I had the site up and running on heroku that very night.  (Thanks &lt;a href=&#34;http://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Just a couple years ago, this same splash page would have taken a team of front end engineers a full 2 week sprint.  The landing page code is public.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone https://github.com/ojones/cityhollalanding.git
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Master Algorithm</title>
      <link>http://ojones.github.io/blog/books/TheMasterAlgorithm/</link>
      <pubDate>Mon, 16 Nov 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/TheMasterAlgorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://homes.cs.washington.edu/~pedrod/&#34;&gt;Pedro Domingos&lt;/a&gt; gives a valient effort to bring the complexity and potential of machine learning (ML) to the average jane.  He fails, but succeeds in telling the compelling story of ML algorithms to this point, and to where they may be going.&lt;/p&gt;

&lt;p&gt;I recommend this &lt;a href=&#34;http://www.amazon.com/The-Master-Algorithm-Ultimate-Learning/dp/0465065708&#34;&gt;book&lt;/a&gt; to everyone who has an, at least, a peripheral understanding of data science.  Domingos does more than just skim the major algorithms.  He weaves their stories together in a coherent journey toward the ultimate algorithm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Better Wikipedia Parser</title>
      <link>http://ojones.github.io/blog/wikipedia_parser/</link>
      <pubDate>Fri, 02 Oct 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/wikipedia_parser/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ pip install wikipedia_parser
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:907c88537397ec981ae3b6c17395c58b&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Uses Wikipedia API to store page id, title, html, wiki text, expanded templates, categories, page links, and summary in one class object for easy reference.  Also parses infobox data from wiki text, including page name, template name, image name, image url, and labeled key value data.&lt;/p&gt;

&lt;h2 id=&#34;code-example:907c88537397ec981ae3b6c17395c58b&#34;&gt;Code Example&lt;/h2&gt;

&lt;p&gt;Instantiate Wikipedia API object with page name or id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from wikipedia_parser.wikipedia_api import WikipediaAPI
# wikipedia search id can be digit or name (redirects are handled :)
search_id = &#39;Ada_Lovelace&#39;
wiki_api = WikipediaAPI(search_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the print list of available api resources&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; print(dir(wiki_api))
[   ...
    &#39;categories&#39;,
    &#39;expanded_html&#39;,
    &#39;html&#39;,
    &#39;page_id&#39;,
    &#39;page_links&#39;,
    &#39;search_id&#39;,
    &#39;summary&#39;,
    &#39;title&#39;,
    &#39;wiki_text&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an infobox is present on page, you can parse the infobox data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from wikipedia_parser.infobox import Infobox
# wiki text can be from anywhere, does not need to come from WikipediaAPI object
wiki_text = wiki_api.wiki_text
infobox = Infobox(wiki_text)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the print list of available attributes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; print(dir(infobox))
[   ...
    &#39;data&#39;,
    &#39;image_filename&#39;,
    &#39;image_url&#39;,
    &#39;page_name&#39;,
    &#39;template_name&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Infobox &amp;ldquo;data&amp;rdquo; is a dict with keys and values from wikipedia page&amp;rsquo;s infobox (if page has infobox).
&lt;br&gt;Each key field in data returns a dict with values for &amp;lsquo;plain_text&amp;rsquo;, &amp;lsquo;raw_text&amp;rsquo;, and &amp;lsquo;wiki_links&amp;rsquo;.
&lt;br&gt;Compare with &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34; target=&#34;_blank&#34;&gt;Ada_Lovelace&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# infobox.data for &amp;quot;Ada_Lovelace&amp;quot; returns:
{u&#39;birth_date&#39;: {
    &#39;plain_text&#39;: u&#39;&#39;,
    &#39;raw_text&#39;: u&#39;{{birth date|1815|12|10|df=yes}}&#39;,
    &#39;wiki_links&#39;: []},
u&#39;birth_name&#39;: {
    &#39;plain_text&#39;: u&#39;The Hon. Augusta Ada Byron&#39;,
    &#39;raw_text&#39;: u&#39;The Hon. Augusta Ada Byron&#39;,
    &#39;wiki_links&#39;: []},
u&#39;birth_place&#39;: {
    &#39;plain_text&#39;: u&#39;London, England&#39;,
    &#39;raw_text&#39;: u&#39;London, England&#39;,
    &#39;wiki_links&#39;: []},
u&#39;caption&#39;: {
    &#39;plain_text&#39;: u&#39;Ada, Countess of Lovelace, 1840&#39;,
    &#39;raw_text&#39;: u&#39;Ada, Countess of Lovelace, 1840&#39;,
    &#39;wiki_links&#39;: []},
u&#39;children&#39;: {
    &#39;plain_text&#39;: u&#39;&#39;,
    &#39;raw_text&#39;: u&#39;{{plainlist |\n* [[Byron King-Noel, Viscount Ockham|Byron King-Noel, Viscount Ockham and 12th Baron Wentworth]]\n* [[Anne Blunt, 15th Baroness Wentworth]]\n* [[Ralph King-Milbanke, 2nd Earl of Lovelace]]}}&#39;,
    &#39;wiki_links&#39;: [u&#39;Byron King-Noel, Viscount Ockham&#39;,
                   u&#39;Anne Blunt, 15th Baroness Wentworth&#39;,
                   u&#39;Ralph King-Milbanke, 2nd Earl of Lovelace&#39;]},
u&#39;death_date&#39;: {
    &#39;plain_text&#39;: u&#39;&#39;,
    &#39;raw_text&#39;: u&#39;{{death date and age|1852|11|27|1815|12|10|df=yes}}&#39;,
    &#39;wiki_links&#39;: []},
u&#39;death_place&#39;: {
    &#39;plain_text&#39;: u&#39;Marylebone, London, England&#39;,
    &#39;raw_text&#39;: u&#39;[[Marylebone]], London, England&#39;,
    &#39;wiki_links&#39;: [u&#39;Marylebone&#39;]},
u&#39;field&#39;: {
    &#39;plain_text&#39;: u&#39;Mathematics, computing&#39;,
    &#39;raw_text&#39;: u&#39;Mathematics, computing&#39;,
    &#39;wiki_links&#39;: []},
u&#39;image&#39;: {
    &#39;plain_text&#39;: u&#39;Ada Lovelace portrait.jpg&#39;,
    &#39;raw_text&#39;: u&#39;Ada Lovelace portrait.jpg&#39;,
    &#39;wiki_links&#39;: []},
u&#39;name&#39;: {
    &#39;plain_text&#39;: u&#39;Ada, Countess of Lovelace&#39;,
    &#39;raw_text&#39;: u&#39;Ada, Countess of Lovelace&#39;,
    &#39;wiki_links&#39;: []},
u&#39;parents&#39;: {
    &#39;plain_text&#39;: u&#39;&#39;,
    &#39;raw_text&#39;: u&#39;{{plainlist |\n* [[Lord Byron|George Gordon Byron, 6th Baron Byron]]\n* [[Anne Isabella Byron, Baroness Byron|Anne Isabella Milbanke, 11th Baroness Wentworth]]\n  }}&#39;,
    &#39;wiki_links&#39;: [u&#39;Lord Byron&#39;, u&#39;Anne Isabella Byron, Baroness Byron&#39;]},
u&#39;resting_place&#39;: {
    &#39;plain_text&#39;: u&#39;Church of St. Mary Magdalene, Hucknall, Nottingham, England&#39;,
    &#39;raw_text&#39;: u&#39;[[Church of St. Mary Magdalene, Hucknall]], Nottingham, England&#39;,
    &#39;wiki_links&#39;: [u&#39;Church of St. Mary Magdalene, Hucknall&#39;]},
u&#39;spouse&#39;: {
    &#39;plain_text&#39;: u&#39;William King-Noel, 1st Earl of Lovelace&#39;,
    &#39;raw_text&#39;: u&#39;[[William King-Noel, 1st Earl of Lovelace]]&#39;,
    &#39;wiki_links&#39;: [u&#39;William King-Noel, 1st Earl of Lovelace&#39;]},
u&#39;title&#39;: {
    &#39;plain_text&#39;: u&#39;Countess of Lovelace&#39;,
    &#39;raw_text&#39;: u&#39;Countess of Lovelace&#39;,
    &#39;wiki_links&#39;: []}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation:907c88537397ec981ae3b6c17395c58b&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spencermountain/wtf_wikipedia&#34; target=&#34;_blank&#34;&gt;wtf_wikipedia&lt;/a&gt; and &lt;a href=&#34;https://github.com/earwig/mwparserfromhell&#34; target=&#34;blank&#34;&gt;mwparserfromhell&lt;/a&gt; were the best wikipedia parsers I could find.  This one is better.&lt;/p&gt;

&lt;h2 id=&#34;installation:907c88537397ec981ae3b6c17395c58b&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Currently only works on Python 2.7 :(&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ pip install wikipedia_parser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone https://github.com/ojones/wikipedia_parser.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tests:907c88537397ec981ae3b6c17395c58b&#34;&gt;Tests&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;$ py.test
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributors:907c88537397ec981ae3b6c17395c58b&#34;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t be shy.  Needs a couple updats for Python 3. Could use more functions to parse wiki templates such as &amp;ldquo;{{plainlist}}&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;license:907c88537397ec981ae3b6c17395c58b&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coders At Work</title>
      <link>http://ojones.github.io/blog/books/CodersAtWork/</link>
      <pubDate>Wed, 19 Aug 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/CodersAtWork/</guid>
      <description>&lt;p&gt;As developers, we wander through the thick forest of technology everyday.  Lost and unsure, we wish to find the wise ones who have come before.  Surly Douglas Crockford (Javascript), Simon Peython Jones (Haskell), or the great Knuth (Art of Programming) could show us the way.  If only we had their cell number.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/peter-seibel-39518a72&#34;&gt;Peter Seibel&lt;/a&gt; has been to the top of the mountain.  In his &lt;a href=&#34;http://www.amazon.com/Coders-Work-Reflections-Craft-Programming/dp/1430219483&#34;&gt;book&lt;/a&gt; he interviews 15 of the greats on their history, their code practices and beliefs.  In effect, he attempts to answer: what is it that all great programmers have in common?&lt;/p&gt;

&lt;p&gt;You wouldn&amp;rsquo;t believe it if I told you, so my recommendation is to read it, and see the truth for yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intuit</title>
      <link>http://ojones.github.io/blog/relics/intuit/</link>
      <pubDate>Sun, 21 Jun 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/relics/intuit/</guid>
      <description>&lt;p&gt;Circa 2016, I worked at &lt;a href=&#34;https://www.intuit.com/&#34;&gt;Intuit&lt;/a&gt; as a member of the QuickBooks Licenses team.  Hard to say, harder to spell, and it doesn&amp;rsquo;t even mean what you think it does:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/JfZfuo3C-qo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;&lt;br&gt;
We were trying to solve a big problem in a big way.  Become the premiere information source for US government licenses on the federal, state, and city level.  Our secret sauce was an ingest flow that allowed our research team of 10+ to learn, tag, and define requirements for all major licenses in the country.  With the biggest catalog in the world, our next feat was the client app.&lt;/p&gt;

&lt;p&gt;Our entire office had read The Lean Startup by Eric Ries, so we were big into the MVP paradigm.  We ran experiments every sprint, measured results, redesigned, and A/B tested to confirm a sprint or two later.  Our NPS ranged from 50 to 70.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ojones.github.io/blog/blog/relics/images/docstoc-congrats.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;1 Million Subscribers&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Using combination of pivotal, dropbox, and google sheets, our two week sprints began to rock.  Having a rockstar project manager and designer allowed our engineering team to open, execute, and set sail to a project every 2 or 4 weeks.  Epics were delivered according to which new feature would provide the most experimental data.&lt;/p&gt;

&lt;p&gt;With 4 senior engineers including myself, we could all transition from the frontend to the backend.  There were no walls between tasks and we could easily trade work loads if it helped the sprint timeline.  This project was proof to me that Agile Scrum can work the way it promises.&lt;/p&gt;

&lt;p&gt;The trick is to apply a fun and consistent sprint routine that encourages ownership.  We did it by working hand in hand with design and volunteering for agreed upon sprint goals.  Our user stories and designs were ready day one of the sprint.  Each day we wrote our task progress on a white board everyone could see.  Finished tasks were confirmed daily by management or designer and reflected in Pivotal Tracker.&lt;/p&gt;

&lt;p&gt;When you know what&amp;rsquo;s done every day, you can see what&amp;rsquo;s left to do.  And when you&amp;rsquo;re rooting for eachother and there are no wall between frontend and backend, you can help eachother win every sprint.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Work Rules!</title>
      <link>http://ojones.github.io/blog/books/WorkRules/</link>
      <pubDate>Thu, 04 Jun 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/WorkRules/</guid>
      <description>&lt;p&gt;The first third of the &lt;a href=&#34;https://www.workrules.net/&#34;&gt;book&lt;/a&gt; is an unforgivable worship to Google. I almost wrote the book off as a mere marketing scheme. However, as &lt;a href=&#34;https://www.linkedin.com/in/laszlobock&#34;&gt;Laszlo Bock&lt;/a&gt; himself explains, Google has run a variety of experiments and collected data on things about the work place that no woman ever has before.&lt;/p&gt;

&lt;p&gt;Bock clearly lays out the results of the experiments smaller companies couldn’t afford to do themselves, but can’t afford to ignore. He brings HR into the limelight and makes you want to quit your job to join the department of &amp;ldquo;people operations.&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CordFlow</title>
      <link>http://ojones.github.io/blog/cordflow/</link>
      <pubDate>Thu, 21 May 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/cordflow/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone https://github.com/ojones/CordFlow.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Nifty &lt;a href=&#34;http://ojones.github.io/CordFlow/&#34; target=&#34;_blank&#34;&gt;proof of concept&lt;/a&gt; that demonstrates how to convert paper to JSON.  Also demonstrates how the json object can be used to automatically generate a web form and apply the answers back to paper.
&lt;br /&gt;
Though we never brought it out of the concept phase, this POC has inpired a HR production system in one of LA&amp;rsquo;s most successful startups.&lt;/p&gt;

&lt;h2 id=&#34;motivation:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;We made this for a contest as a proof of concept.  There are still so many government paper forms.  Even fillable pdfs don&amp;rsquo;t easily let you apply webform data.  This project proves you can use javascript to convert paper into web objects with just an image of the paper form.&lt;/p&gt;

&lt;h2 id=&#34;installation:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Just clone and open the index.html file in your web browser.&lt;/p&gt;

&lt;h2 id=&#34;license:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Superintelligence</title>
      <link>http://ojones.github.io/blog/books/Superintelligence/</link>
      <pubDate>Tue, 12 May 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/Superintelligence/</guid>
      <description>&lt;p&gt;You would think that a tech &lt;a href=&#34;http://www.amazon.com/Superintelligence-Dangers-Strategies-Nick-Bostrom-ebook/dp/B00LOOCGB2&#34;&gt;book&lt;/a&gt; with such a cool title on such an interesting subject coudn&amp;rsquo;t possibly lose.  But you&amp;rsquo;ll be snoring at the 40% mark.  It turns out that detailed hypotheticals about exactly how and when the world will be destroyed is not fun.  Who knew?&lt;/p&gt;

&lt;p&gt;The one saving grace that makes the whole thing worth it is the movie &amp;ldquo;Ex Machina,&amp;rdquo; which should be required after every reading.  It is doubtful that one could understand the subplot without the background &lt;a href=&#34;http://www.nickbostrom.com/&#34;&gt;Nick Bostrom&lt;/a&gt; provides.&lt;/p&gt;

&lt;p&gt;Dry as it may be, it&amp;rsquo;s the only book I&amp;rsquo;ve found that tackles the dangers of AI seriously.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Dysfunctions of a Team</title>
      <link>http://ojones.github.io/blog/books/5DysfunctionsOfATeam/</link>
      <pubDate>Sat, 04 Apr 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/5DysfunctionsOfATeam/</guid>
      <description>&lt;p&gt;While attending a conference, I got the chance to see &lt;a href=&#34;http://www.tablegroup.com/pat/&#34;&gt;Patrick Lencioni&lt;/a&gt; speak about teams and their common dysfunctions.  I was impressed in the true sense of the word, and am confident he was the crowd favorite.&lt;/p&gt;

&lt;p&gt;Although he made referenced to his &lt;a href=&#34;http://www.amazon.com/Five-Dysfunctions-Team-Leadership-Fable/dp/0787960756/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1454836598&amp;amp;sr=1-1&amp;amp;keywords=5+disfunction%27s+of+a+team&#34;&gt;book&lt;/a&gt; as a fable, the presentation clearly gave away all the valuable facts.  So what was the point of reading his work of fiction now?&lt;/p&gt;

&lt;p&gt;We learn more by story than fact, and Lencioni&amp;rsquo;s fable is yet another credit to that truth.  With preconceived notions that this book would not be worth the time, I picked it up off my manager&amp;rsquo;s desk just to glance.  I didn&amp;rsquo;t put it back down until it was finished.&lt;/p&gt;

&lt;p&gt;Through his clever tale, the lessons come to life.  Even if you are on a fantastic team (as I was) you will find learning about the dysfunctions you will invariably encounter, to be a pleasure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Logician and the Engineer</title>
      <link>http://ojones.github.io/blog/books/TheLogicianAndTheEngineer/</link>
      <pubDate>Fri, 27 Feb 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/TheLogicianAndTheEngineer/</guid>
      <description>&lt;p&gt;This is hands down the most technically challenging &lt;a href=&#34;http://www.amazon.com/The-Logician-Engineer-Shannon-Information/dp/0691151008&#34;&gt;book&lt;/a&gt; I&amp;rsquo;ve ever read.  After reading The Information by James Gleick, I became enamored with Claude Shannon, discoverer of the bit, and father of the information age.  But &lt;a href=&#34;https://en.wikipedia.org/wiki/Paul_J._Nahin&#34;&gt;Paul J. Nahin&lt;/a&gt; makes the strong case that the lion&amp;rsquo;s share of credit originates with &lt;a href=&#34;https://en.wikipedia.org/wiki/George_Boole&#34;&gt;George Boole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nahin accomplishes this by enumerating the boundless applications of boolean algebra.  He unapologetically tours the reader through complex riddles that would have daunted Einstein, but come apart like magic for the electrical engineer.&lt;/p&gt;

&lt;p&gt;I actually don&amp;rsquo;t recommend this book.  It&amp;rsquo;s a pain, boring, and impractical.  Still Nahin&amp;rsquo;s passion for boolean algebra is touching, even facinating.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter Sentiment</title>
      <link>http://ojones.github.io/blog/ga_data_science/</link>
      <pubDate>Thu, 12 Feb 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/ga_data_science/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone https://github.com/ojones/ga_data_science.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not another Twitter sentiment analyzer&amp;hellip;&lt;/p&gt;

&lt;p&gt;This was &lt;a href=&#34;https://gentle-bayou-19852.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;my project&lt;/a&gt; from General Assembly Data Science course taught by Nick Stucky from Whisper.&lt;/p&gt;

&lt;p&gt;Say what you will about coding bootcamps, &lt;a href=&#34;https://generalassemb.ly/education/data-science&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt; class was amazing.  Nick gave us a solid overview of the data science field in general.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who Owns The Future</title>
      <link>http://ojones.github.io/blog/books/WhoOwnsTheFuture/</link>
      <pubDate>Mon, 15 Dec 2014 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/WhoOwnsTheFuture/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jaronlanier.com/&#34;&gt;Jaron Lanier&lt;/a&gt; represents the opposite side of the spectrum from Ray Kurzweil, and in some ways, just as extreme.  Known as the man who coined the phrase &amp;ldquo;virtual reality,&amp;rdquo; he&amp;rsquo;s played a sorted part in the history of computer science and is currently at Microsoft Research.&lt;/p&gt;

&lt;p&gt;In the information age, is it any wonder that the companies that gather the most data on indiviuals in society are the richest?  And if we live in such an age, why are we giving our information away for free to these mega servers (Google, Amazon, Facebook)?&lt;/p&gt;

&lt;p&gt;Lanier&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Who-Owns-Future-Jaron-Lanier/dp/1451654979&#34;&gt;book&lt;/a&gt; is an almalgamation of his perspective on technology, econmics and the future.  Instead of fearing the AI singularity, which he feels is laughable, Lanier believes that society must take ownership of their online data, before the &amp;ldquo;siren servers&amp;rdquo; destroy our economy.&lt;/p&gt;

&lt;p&gt;Lanier&amp;rsquo;s claim&amp;rsquo;s that these concerns and solutions are not predictions, but eventuallities.  His hope is that we learn our economic lessons sooner, rather than after a century long recession.&lt;/p&gt;

&lt;p&gt;In the end, it&amp;rsquo;s tough to make the call.  Lanier or Kurzweil.  Kurzeil or Lanier.  Both have been around so long and seen so much.  Both are renegades headed in opposite directions.  I think they go great together.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>