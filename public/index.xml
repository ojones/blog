<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oswald Jones</title>
    <link>http://ojones.github.io/blog/</link>
    <description>Recent content on Oswald Jones</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Oswald Jones</copyright>
    <lastBuildDate>Fri, 21 Oct 2016 19:25:22 -0800</lastBuildDate>
    <atom:link href="http://ojones.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Best HTML Table Parser</title>
      <link>http://ojones.github.io/blog/html_table_parser/</link>
      <pubDate>Fri, 21 Oct 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/html_table_parser/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/html_table_parser.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Transform html tables into usable data structures.  Using beautiful soup table object, return 2D array structure, dictionary, or array of column data.  Imputes cell values from row and col spans :)&lt;/p&gt;

&lt;h2 id=&#34;code-example:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Code Example&lt;/h2&gt;

&lt;p&gt;Given an html table (with or without row and col spans). You can make a 2D array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;soup = bs(YOUR_HTML_TABLE, &amp;quot;html.parser&amp;quot;)
test_table = soup.find(&#39;table&#39;)
twod_array = parse.make2d(test_table)

# print 2D array
print(twod_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use that 2D array to return column data by heading name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# print column data by col heading name (case insensitive)
print(parse.twod_col_data(twod_array, &#39;first name&#39;))
print(parse.twod_col_data(twod_array, &#39;lAst naMe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or transform the soup table object (test_table) into a dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# row data begins on first row after col headings
# so rowstart is 1
print(parse.make_dict(test_table, 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I looked everywhere for the code to transform html tables with row and col spans into a 2D array and couldn&amp;rsquo;t find it.  So I thought how hard could it be to quickly write my own.  It was actally kinda hard, so here it is for the next guy.&lt;/p&gt;

&lt;h2 id=&#34;installation:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;So far html_table_parser is just a module with parser functions.  It works on Python 2.7 and Python 3.4.&lt;/p&gt;

&lt;h2 id=&#34;tests:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Tests&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; py.test
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributors:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t be shy.&lt;/p&gt;

&lt;h2 id=&#34;license:2e8e527b21ef2deedced2078cd8e4e6a&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Work Rules!</title>
      <link>http://ojones.github.io/blog/books/WorkRules/</link>
      <pubDate>Sat, 04 Jun 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/WorkRules/</guid>
      <description>&lt;p&gt;The first third of the &lt;a href=&#34;https://www.workrules.net/&#34;&gt;book&lt;/a&gt; is an unforgivable worship to Google. I almost wrote the book off as a mere marketing scheme. However, as &lt;a href=&#34;https://www.linkedin.com/in/laszlobock&#34;&gt;Laszlo Bock&lt;/a&gt; himself explains, Google has run a variety of experiments and collected data on things about the work place that no woman ever has before.&lt;/p&gt;

&lt;p&gt;Bock clearly lays out the results of the experiments smaller companies couldn’t afford to do themselves, but can’t afford to ignore. He brings HR into the limelight and makes you want to quit your job to join the people operations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cityholla</title>
      <link>http://ojones.github.io/blog/cityhollalanding/</link>
      <pubDate>Mon, 25 Jan 2016 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/cityhollalanding/</guid>
      <description>

&lt;p&gt;The Cityholla project was a finalist for the city of Santa Monica &lt;a href=&#34;http://hackthebeach.com/contest/&#34;&gt;&amp;ldquo;Hack the Beach&amp;rdquo;&lt;/a&gt; contest 2015.&lt;/p&gt;

&lt;p&gt;They say that Moore&amp;rsquo;s law only applies to hardware, but I agree with &lt;a href=&#34;http://www.kurzweilai.net/&#34;&gt;Ray Kurzweil&lt;/a&gt; that software is also advancing at a more than linear rate.&lt;/p&gt;

&lt;h1 id=&#34;landing-page:a49397842d3bcbafe692d19dec0e020b&#34;&gt;Landing Page&lt;/h1&gt;

&lt;p&gt;The project lead, who is a friend, sent me a text on Sunday to create a landing page to display details and collect emails.  I had the site up and running on heroku that very night.  (Thanks &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Just a couple years ago, this same splash page would have taken a team of front end engineers a full 2 week sprint.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/cityhollalanding.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view the rendered site at &lt;a href=&#34;http://www.cityholla.com/&#34;&gt;cityholla.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Master Algorithm</title>
      <link>http://ojones.github.io/blog/books/TheMasterAlgorithm/</link>
      <pubDate>Mon, 16 Nov 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/TheMasterAlgorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://homes.cs.washington.edu/~pedrod/&#34;&gt;Pedro Domingos&lt;/a&gt; gives a valient effort to bring the complexity and potential of machine learning (ML) to the common man.  He fails, but succeeds in telling the compelling story of ML algorithms to this point and to where they may be going.&lt;/p&gt;

&lt;p&gt;I recommend this &lt;a href=&#34;http://www.amazon.com/The-Master-Algorithm-Ultimate-Learning/dp/0465065708&#34;&gt;book&lt;/a&gt; to everyone who has an, at least, peripheral understanding of data science.  Domingos does more than just skim the major algorithms.  He weaves their stories together in a coherent journey toward the ultimate algorithm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Wikipedia Parser</title>
      <link>http://ojones.github.io/blog/wikipedia_parser/</link>
      <pubDate>Fri, 02 Oct 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/wikipedia_parser/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/wikipedia_parser.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:907c88537397ec981ae3b6c17395c58b&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Uses Wikipedia API to store page id, title, html, wiki text, expanded templates, categories, page links, and summary in one class object for easy reference.  Also parses infobox data from wiki text, including page name, template name, image name, image url, and labeled key value data.&lt;/p&gt;

&lt;h2 id=&#34;code-example:907c88537397ec981ae3b6c17395c58b&#34;&gt;Code Example&lt;/h2&gt;

&lt;p&gt;Instantiate Wikipedia API object with page name or id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# wikipedia id can be digit or name (redirects are handled :)
page = &#39;Ada_Lovelace&#39;
wiki_api = WikipediaAPI(page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the print list of available api resources&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; print(dir(wiki_api))
[   ...
    &#39;categories&#39;,
    &#39;expanded_html&#39;,
    &#39;html&#39;,
    &#39;page_id&#39;,
    &#39;page_links&#39;,
    &#39;search_id&#39;,
    &#39;summary&#39;,
    &#39;title&#39;,
    &#39;wiki_text&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an infobox is present on page, you can parse the infobox data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# wiki text can be from anywhere, does not need to come from WikipediaAPI object
wiki_text = wiki_api.wiki_text
infobox = Infobox(wiki_text)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the print list of available attributes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; print(dir(infobox))
[   ...
    &#39;data&#39;,
    &#39;image_filename&#39;,
    &#39;image_url&#39;,
    &#39;page_name&#39;,
    &#39;template_name&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Infobox &amp;ldquo;data&amp;rdquo; is a dict of plain_text (ie no wiki templates), raw_text, and wiki links to other pages.
&lt;br&gt;Compare with &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34;&gt;Ada_Lovelace&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{   u&#39;birth_date&#39;: {   &#39;plain_text&#39;: u&#39;&#39;,
                       &#39;raw_text&#39;: u&#39;{{birth date|1815|12|10|df=yes}}&#39;,
                       &#39;wiki_links&#39;: []},
    u&#39;birth_name&#39;: {   &#39;plain_text&#39;: u&#39;The Hon. Augusta Ada Byron&#39;,
                       &#39;raw_text&#39;: u&#39;The Hon. Augusta Ada Byron&#39;,
                       &#39;wiki_links&#39;: []},
    u&#39;birth_place&#39;: {   &#39;plain_text&#39;: u&#39;London, England&#39;,
                        &#39;raw_text&#39;: u&#39;London, England&#39;,
                        &#39;wiki_links&#39;: []},
    u&#39;caption&#39;: {   &#39;plain_text&#39;: u&#39;Ada, Countess of Lovelace, 1840&#39;,
                    &#39;raw_text&#39;: u&#39;Ada, Countess of Lovelace, 1840&#39;,
                    &#39;wiki_links&#39;: []},
    u&#39;children&#39;: {   &#39;plain_text&#39;: u&#39;&#39;,
                     &#39;raw_text&#39;: u&#39;{{plainlist |\n* [[Byron King-Noel, Viscount Ockham|Byron King-Noel, Viscount Ockham and 12th Baron Wentworth]]\n* [[Anne Blunt, 15th Baroness Wentworth]]\n* [[Ralph King-Milbanke, 2nd Earl of Lovelace]]}}&#39;,
                     &#39;wiki_links&#39;: [   u&#39;Byron King-Noel, Viscount Ockham&#39;,
                                       u&#39;Anne Blunt, 15th Baroness Wentworth&#39;,
                                       u&#39;Ralph King-Milbanke, 2nd Earl of Lovelace&#39;]},
    u&#39;death_date&#39;: {   &#39;plain_text&#39;: u&#39;&#39;,
                       &#39;raw_text&#39;: u&#39;{{death date and age|1852|11|27|1815|12|10|df=yes}}&#39;,
                       &#39;wiki_links&#39;: []},
    u&#39;death_place&#39;: {   &#39;plain_text&#39;: u&#39;Marylebone, London, England&#39;,
                        &#39;raw_text&#39;: u&#39;[[Marylebone]], London, England&#39;,
                        &#39;wiki_links&#39;: [u&#39;Marylebone&#39;]},
    u&#39;field&#39;: {   &#39;plain_text&#39;: u&#39;Mathematics, computing&#39;,
                  &#39;raw_text&#39;: u&#39;Mathematics, computing&#39;,
                  &#39;wiki_links&#39;: []},
    u&#39;image&#39;: {   &#39;plain_text&#39;: u&#39;Ada Lovelace portrait.jpg&#39;,
                  &#39;raw_text&#39;: u&#39;Ada Lovelace portrait.jpg&#39;,
                  &#39;wiki_links&#39;: []},
    u&#39;name&#39;: {   &#39;plain_text&#39;: u&#39;Ada, Countess of Lovelace&#39;,
                 &#39;raw_text&#39;: u&#39;Ada, Countess of Lovelace&#39;,
                 &#39;wiki_links&#39;: []},
    u&#39;parents&#39;: {   &#39;plain_text&#39;: u&#39;&#39;,
                    &#39;raw_text&#39;: u&#39;{{plainlist |\n* [[Lord Byron|George Gordon Byron, 6th Baron Byron]]\n* [[Anne Isabella Byron, Baroness Byron|Anne Isabella Milbanke, 11th Baroness Wentworth]]\n  }}&#39;,
                    &#39;wiki_links&#39;: [u&#39;Lord Byron&#39;, u&#39;Anne Isabella Byron, Baroness Byron&#39;]},
    u&#39;resting_place&#39;: {   &#39;plain_text&#39;: u&#39;Church of St. Mary Magdalene, Hucknall, Nottingham, England&#39;,
                          &#39;raw_text&#39;: u&#39;[[Church of St. Mary Magdalene, Hucknall]], Nottingham, England&#39;,
                          &#39;wiki_links&#39;: [u&#39;Church of St. Mary Magdalene, Hucknall&#39;]},
    u&#39;spouse&#39;: {   &#39;plain_text&#39;: u&#39;William King-Noel, 1st Earl of Lovelace&#39;,
                   &#39;raw_text&#39;: u&#39;[[William King-Noel, 1st Earl of Lovelace]]&#39;,
                   &#39;wiki_links&#39;: [u&#39;William King-Noel, 1st Earl of Lovelace&#39;]},
    u&#39;title&#39;: {   &#39;plain_text&#39;: u&#39;Countess of Lovelace&#39;,
                  &#39;raw_text&#39;: u&#39;Countess of Lovelace&#39;,
                  &#39;wiki_links&#39;: []}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation:907c88537397ec981ae3b6c17395c58b&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spencermountain/wtf_wikipedia&#34;&gt;wtf_wikipedia&lt;/a&gt; and &lt;a href=&#34;https://github.com/earwig/mwparserfromhell&#34;&gt;mwparserfromhell&lt;/a&gt; were the best wikipedia parsers I could find.  This one is better.&lt;/p&gt;

&lt;h2 id=&#34;installation:907c88537397ec981ae3b6c17395c58b&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Currently only works on Python 2.7 :(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tests:907c88537397ec981ae3b6c17395c58b&#34;&gt;Tests&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; py.text
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributors:907c88537397ec981ae3b6c17395c58b&#34;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t be shy.  Needs a couple updats for Python 3. Could use more functions to parse wiki templates such as &amp;ldquo;{{plainlist}}&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;license:907c88537397ec981ae3b6c17395c58b&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://ojones.github.io/blog/about/</link>
      <pubDate>Mon, 10 Aug 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/about/</guid>
      <description>&lt;p&gt;I am a software engineer at Mediahound where I work on The Entertainment Graph &amp;trade; powered by Neo4j.&lt;/p&gt;

&lt;p&gt;I love coding in Python, Javascript, and C#, but am also interested in modern functional languages (Ruby is cool too).  This blog is powered by Hugo, which is coded in Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CordFlow</title>
      <link>http://ojones.github.io/blog/cordflow/</link>
      <pubDate>Thu, 21 May 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/cordflow/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/CordFlow.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;synopsis:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Synopsis&lt;/h2&gt;

&lt;p&gt;Nifty &lt;a href=&#34;http://ojones.github.io/CordFlow/&#34;&gt;proof of concept&lt;/a&gt; that demonstrates how to convert paper to JSON.  Also demonstrates how the json object can be used to automatically generate a web form and apply the answers back to paper.&lt;/p&gt;

&lt;h2 id=&#34;motivation:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;We made this for a contest as a proof of concept.  There are still so many government paper forms.  Even fillable pdfs don&amp;rsquo;t easily let you apply webform data.  This project proves you can use javascript to convert paper into web objects with just an image of the paper form.&lt;/p&gt;

&lt;h2 id=&#34;installation:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Just open the index.html file in your web browser.&lt;/p&gt;

&lt;h2 id=&#34;license:1665c900a994357c0fd7bd49c23dfebe&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Superintelligence</title>
      <link>http://ojones.github.io/blog/books/Superintelligence/</link>
      <pubDate>Tue, 12 May 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/books/Superintelligence/</guid>
      <description>&lt;p&gt;You would think that a tech &lt;a href=&#34;http://www.amazon.com/Superintelligence-Dangers-Strategies-Nick-Bostrom-ebook/dp/B00LOOCGB2&#34;&gt;book&lt;/a&gt; with such a cool title on such an interesting subject coudn&amp;rsquo;t possibly lose.  But you&amp;rsquo;ll be snoring at the 40% mark.  It turns out that detailed hypotheticals about exactly how and when the world will be destroyed is not fun.  Who knew?&lt;/p&gt;

&lt;p&gt;The one saving grace that makes the whole thing worth it is the movie &amp;ldquo;Ex Machina,&amp;rdquo; which should be required after every reading.  It is doubtful you will understand the plot of the movie without the background &lt;a href=&#34;http://www.nickbostrom.com/&#34;&gt;Nick Bostrom&lt;/a&gt; gives.  Dry as it may be, it&amp;rsquo;s the only book I&amp;rsquo;ve found that tackles the dangers of AI seriously.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter Sentiment</title>
      <link>http://ojones.github.io/blog/ga_data_science/</link>
      <pubDate>Thu, 12 Feb 2015 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/ga_data_science/</guid>
      <description>&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/ga_data_science.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not another Twitter sentiment analyzer&amp;hellip;&lt;/p&gt;

&lt;p&gt;This was my project from General Assembly Data Science course taught by Nick Stucky from &lt;a href=&#34;https://whisper.sh/&#34;&gt;Whisper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Say what you will about coding bootcamps, &lt;a href=&#34;https://generalassemb.ly/education/data-science&#34;&gt;this&lt;/a&gt; class was amazing.  Nick gave us a solid overview of the data science field in general.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ML Class Library</title>
      <link>http://ojones.github.io/blog/coursera_ml_library/</link>
      <pubDate>Thu, 09 Oct 2014 19:25:22 -0800</pubDate>
      
      <guid>http://ojones.github.io/blog/coursera_ml_library/</guid>
      <description>&lt;pre&gt;&lt;code&gt;git clone https://github.com/ojones/coursera_ml_library.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Project for Coursera Machine Learning class with Stanford Professor Andrew Ng.&lt;/p&gt;

&lt;p&gt;Most everyone already knows this, but in case you don&amp;rsquo;t.  &lt;a href=&#34;https://www.coursera.org/learn/machine-learning&#34;&gt;This&lt;/a&gt; is the best intro to machine learning in the world.  &lt;a href=&#34;http://www.andrewng.org/&#34;&gt;Andrew Ng&lt;/a&gt;, co-founder our Coursera, compassionately surveys the field of machine learning algorithms.  It is he who sparked my passion for data science and many thousands more.  And did I mention the class is free.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>